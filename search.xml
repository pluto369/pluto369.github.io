<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅析Python装饰器（上）</title>
      <link href="/2020/07/21/%E6%B5%85%E6%9E%90Python%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2020/07/21/%E6%B5%85%E6%9E%90Python%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="基于函数实现的装饰器（函数装饰器）"><a href="#基于函数实现的装饰器（函数装饰器）" class="headerlink" title="基于函数实现的装饰器（函数装饰器）"></a>基于函数实现的装饰器（函数装饰器）</h2><p><strong>理解Python函数定义</strong></p><ol><li><strong>函数可以作为返回值</strong>：在Python中，一切皆为对象，函数也不例外，它可以像整数一样作为其它函数的返回值</li></ol><pre><code class="highlight python"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span>    <span class="keyword">return</span> <span class="number">1</span><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span>    <span class="keyword">return</span> fooprint(bar()) <span class="comment"># &lt;function foo at 0x10a2f4140&gt;</span>print(bar()()) <span class="comment"># 1 </span><span class="comment"># 等价于</span>print(foo()) <span class="comment"># 1</span></code></pre><ol start="2"><li><strong>函数可以作为参数</strong>：函数还可以像整数一样作为函数的参数</li></ol><pre><code class="highlight python"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(num)</span>:</span>    <span class="keyword">return</span> num + <span class="number">1</span><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(fun)</span>:</span>    <span class="keyword">return</span> fun(<span class="number">3</span>)value = bar(foo)print(value)  <span class="comment"># 4</span></code></pre><h4 id="无参数函数装饰器基本结构"><a href="#无参数函数装饰器基本结构" class="headerlink" title="无参数函数装饰器基本结构"></a>无参数函数装饰器基本结构</h4><pre><code class="highlight python"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># *args,**kargs代表原函数参数列表</span>        <span class="comment"># ... 在这里可以给原函数增加功能</span>        <span class="comment"># 打印原函数名</span>        print(<span class="string">"%s 函数开始执行..."</span> % func.__name__)          <span class="comment"># 调用原函数，f为原函数返回值，意味着可以修改原函数的返回值，为原函数增加功能</span>        f=func(*args,**kwargs)         <span class="keyword">return</span> f  <span class="comment"># 这里直接返回原函数，没有添加功能</span>    <span class="keyword">return</span> wrapper</code></pre><h4 id="简单的无参数函数装饰器"><a href="#简单的无参数函数装饰器" class="headerlink" title="简单的无参数函数装饰器"></a>简单的无参数函数装饰器</h4><pre><code class="highlight python"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps<span class="comment"># functools.wraps 用于保留原函数相关信息</span><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span><span class="meta">    @wraps(func) </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>        print(<span class="string">"计算开始:..."</span>) <span class="comment"># 在原函数开始打印信息</span>        f = func(*args, **kwargs)        f = str(f) + <span class="string">'\n'</span> + <span class="string">'计算结束!!!'</span> <span class="comment"># 修改原函数返回值，为原函数增加功能</span>        <span class="keyword">return</span> f    <span class="keyword">return</span> wrapper<span class="comment"># 使用函数装饰器</span><span class="meta">@decorator</span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a + b<span class="meta">@decorator</span><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a - bprint(add(<span class="number">1</span>, <span class="number">7000</span>))print(sub(<span class="number">94615</span>, <span class="number">5</span>))<span class="comment"># 直接复制代码到编辑器即可查看打印结果</span></code></pre><h4 id="有参数函数装饰器基本结构"><a href="#有参数函数装饰器基本结构" class="headerlink" title="有参数函数装饰器基本结构"></a>有参数函数装饰器基本结构</h4><pre><code class="highlight python"><span class="comment"># 在无参数函数装饰器结构上，外层增加了一层函数</span><span class="function"><span class="keyword">def</span> <span class="title">args_decorator</span><span class="params">(start, end)</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>            print(<span class="string">'%s----%s'</span> % (start, end)) <span class="comment"># 简单打印了传入的参数，为增加其他功能</span>            <span class="keyword">return</span> func(*args, *kwargs)        <span class="keyword">return</span> wrapper    <span class="keyword">return</span> decorator</code></pre><h4 id="简单的有参数函数装饰器"><a href="#简单的有参数函数装饰器" class="headerlink" title="简单的有参数函数装饰器"></a>简单的有参数函数装饰器</h4><pre><code class="highlight python"><span class="function"><span class="keyword">def</span> <span class="title">args_decorator</span><span class="params">(start, end)</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>            print(<span class="string">'%s----%s'</span> % (start, end))            <span class="keyword">return</span> func(*args, *kwargs)        <span class="keyword">return</span> wrapper    <span class="keyword">return</span> decorator<span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># *args,**kargs代表原函数参数列表</span>        <span class="comment"># ... 在这里可以给原函数增加功能</span>        <span class="comment"># 打印原函数名</span>        print(<span class="string">"%s 函数开始执行..."</span> % func.__name__)          <span class="comment"># 调用原函数，f为原函数返回值，意味着可以修改原函数的返回值，为原函数增加功能</span>        f=func(*args,**kwargs)         <span class="keyword">return</span> f  <span class="comment"># 这里直接返回原函数，没有添加功能</span>    <span class="keyword">return</span> wrapper<span class="comment"># 使用函数装饰器</span><span class="meta">@args_decorator('登录', '登出')</span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a + b<span class="meta">@args_decorator('登录', '登出')</span><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a - bprint(add(<span class="number">1</span>, <span class="number">75</span>))print(sub(<span class="number">98</span>, <span class="number">5</span>))<span class="comment">## 可以同时使用多个装饰器</span><span class="meta">@args_decorator('登录', '登出')</span><span class="meta">@decorator</span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a + b<span class="meta">@args_decorator('登录', '登出')</span><span class="meta">@decorator</span><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a - bprint(add(<span class="number">1</span>, <span class="number">75</span>))print(sub(<span class="number">98</span>, <span class="number">5</span>))<span class="comment"># 直接复制代码到编辑器即可查看打印结果</span></code></pre><h4 id="注：functools-wraps可保留原函数相关信息"><a href="#注：functools-wraps可保留原函数相关信息" class="headerlink" title="注：functools.wraps可保留原函数相关信息"></a>注：functools.wraps可保留原函数相关信息</h4><h6 id="未使用functools-wraps"><a href="#未使用functools-wraps" class="headerlink" title="未使用functools.wraps"></a>未使用functools.wraps</h6><pre><code class="highlight python"><span class="function"><span class="keyword">def</span> <span class="title">args_decorator</span><span class="params">(start, end)</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>            print(<span class="string">'%s----%s'</span> % (start, end))            print(<span class="string">"%s 函数开始执行..."</span> % func.__name__)            <span class="keyword">return</span> func(*args, *kwargs)        <span class="keyword">return</span> wrapper    <span class="keyword">return</span> decorator<span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># *args,**kargs代表原函数参数列表</span>        <span class="comment"># ... 在这里可以给原函数增加功能</span>        <span class="comment"># 打印原函数名</span>        print(<span class="string">"%s 函数开始执行..."</span> % func.__name__)        <span class="comment"># 调用原函数，f为原函数返回值，意味着可以修改原函数的返回值，为原函数增加功能</span>        f=func(*args,**kwargs)        <span class="keyword">return</span> f  <span class="comment"># 这里直接返回原函数，没有添加功能</span>    <span class="keyword">return</span> wrapper<span class="meta">@args_decorator('登录', '登出')</span><span class="meta">@decorator</span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a + b<span class="meta">@args_decorator('登录', '登出')</span><span class="meta">@decorator</span><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a - bprint(add(<span class="number">1</span>, <span class="number">75</span>))print(sub(<span class="number">98</span>, <span class="number">5</span>))<span class="comment"># 直接复制代码到编辑器即可查看打印结果</span></code></pre><p><strong>输出结果</strong></p><p>![Snipaste_2020-07-21_14-09-39](C:\Users\pluto\Pictures\Camera Roll\Snipaste_2020-07-21_14-09-39.png)</p><h6 id="使用functools-wraps"><a href="#使用functools-wraps" class="headerlink" title="使用functools.wraps"></a>使用functools.wraps</h6><pre><code class="highlight python"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps<span class="function"><span class="keyword">def</span> <span class="title">args_decorator</span><span class="params">(start, end)</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>            print(<span class="string">'%s----%s'</span> % (start, end))            <span class="comment"># print("%s 函数开始执行..." % func.__name__)</span>            <span class="keyword">return</span> func(*args, *kwargs)        <span class="keyword">return</span> wrapper    <span class="keyword">return</span> decorator<span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span><span class="meta">    @wraps(func)</span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># *args,**kargs代表原函数参数列表</span>        <span class="comment"># ... 在这里可以给原函数增加功能</span>        <span class="comment"># 打印原函数名</span>        print(<span class="string">"%s 函数开始执行..."</span> % func.__name__)        <span class="comment"># 调用原函数，f为原函数返回值，意味着可以修改原函数的返回值，为原函数增加功能</span>        f=func(*args,**kwargs)        <span class="keyword">return</span> f  <span class="comment"># 这里直接返回原函数，没有添加功能</span>    <span class="keyword">return</span> wrapper<span class="meta">@args_decorator('登录', '登出')</span><span class="meta">@decorator</span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a + b<span class="meta">@args_decorator('登录', '登出')</span><span class="meta">@decorator</span><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(a, b)</span>:</span>    <span class="keyword">return</span> a - bprint(add(<span class="number">1</span>, <span class="number">75</span>))print(sub(<span class="number">98</span>, <span class="number">5</span>))<span class="comment"># 直接复制代码到编辑器即可查看打印结果</span></code></pre><p><strong>输出结果</strong></p><p>![Snipaste_2020-07-21_14-12-15](C:\Users\pluto\Pictures\Camera Roll\Snipaste_2020-07-21_14-12-15.png)</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/2020/07/13/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
      <url>/2020/07/13/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="南辞的个人简历"><a href="#南辞的个人简历" class="headerlink" title="南辞的个人简历"></a>南辞的个人简历</h2><h4 id="姓名：陶建行"><a href="#姓名：陶建行" class="headerlink" title="姓名：陶建行"></a>姓名：陶建行</h4><h4 id="邮箱：1811783973-qq-com"><a href="#邮箱：1811783973-qq-com" class="headerlink" title="邮箱：1811783973@qq.com"></a>邮箱：<a href="mailto:1811783973@qq.com">1811783973@qq.com</a></h4><h4 id="现居地址：武汉"><a href="#现居地址：武汉" class="headerlink" title="现居地址：武汉"></a>现居地址：武汉</h4><h4 id="个人网站地址：南辞的博客"><a href="#个人网站地址：南辞的博客" class="headerlink" title="个人网站地址：南辞的博客"></a>个人网站地址：<a href="www.celestee.top">南辞的博客</a></h4><h4 id="求职意向：WebGIS开发-GIS数据处理"><a href="#求职意向：WebGIS开发-GIS数据处理" class="headerlink" title="求职意向：WebGIS开发/GIS数据处理"></a>求职意向：WebGIS开发/GIS数据处理</h4><h4 id="工作状态：2020应届毕业生-正在积极找工作"><a href="#工作状态：2020应届毕业生-正在积极找工作" class="headerlink" title="工作状态：2020应届毕业生 正在积极找工作"></a>工作状态：2020应届毕业生 正在积极找工作</h4><h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><ul><li>熟悉JavaScript,了解TypeScript,掌握ES6以上常用语法</li><li>熟悉Vue.js相关技术栈，如Axios,Vue-Router,Vuex等，了解基本原理</li><li>熟悉前端工程化，熟悉Webpack/Babel的Loader/Plugin相关配置</li><li>熟悉计算机网络原理，网络基础，常用OGC规范等知识</li><li>熟悉ArcGIS使用，GeoServer发布地图服务，使用PostgreSQL数据库进行空间数据管理</li><li>熟练使用Git以及Github进行团队协作开发</li><li>掌握Python进行数据清洗</li><li>了解Less,Sass等CSS预处理器</li><li>了解openlayers基本使用</li><li>了解常用数据结构与算法</li></ul><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><h4 id="华东冶金地质勘查局综合地质大队（马鞍山）"><a href="#华东冶金地质勘查局综合地质大队（马鞍山）" class="headerlink" title="华东冶金地质勘查局综合地质大队（马鞍山）"></a>华东冶金地质勘查局综合地质大队（马鞍山）</h4><ul><li>职位名称：测绘技术员</li><li>实习时间：2018.07-2018.08</li><li>工作内容：参与河南省安阳市的外野测绘任务，使用RTK,调查记录当地农村土地利用情况，使用CASS进行测绘成果出图</li></ul><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><h4 id="铜陵学院-建筑工程学院-地理信息科学"><a href="#铜陵学院-建筑工程学院-地理信息科学" class="headerlink" title="铜陵学院-建筑工程学院-地理信息科学"></a>铜陵学院-建筑工程学院-地理信息科学</h4><ul><li>在读时间：2016.09-2020.06</li><li>获得荣誉/奖项：校级奖学金，先进个人</li><li>学习相关课程：地理信息系统概论、遥感概论、遥感数字图像处理、地图学、现代测量学、地理信息系统设计与开发、GIS空间分析原理与方法 、 数据结构与算法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2020/07/12/hello-hexo/"/>
      <url>/2020/07/12/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="highlight bash">$ hexo new <span class="string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="highlight bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="highlight bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="highlight bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo部署博客测试</title>
      <link href="/2020/07/12/Hexo%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/07/12/Hexo%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><pre><code class="highlight javascript">npm install hexo -g #安装Hexonpm update hexo -g #升级hexo init #初始化博客#常用命令简写形式hexo n "我的博客" == hexo new "我的博客" #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</code></pre><h2 id="图片外链测试"><a href="#图片外链测试" class="headerlink" title="图片外链测试"></a>图片外链测试</h2><p><img src="http://i2.tiimg.com/723087/1f537d2d82205344.jpg" alt=""></p><h2 id="链接文本测试"><a href="#链接文本测试" class="headerlink" title="链接文本测试"></a>链接文本测试</h2><p><a href="https://cn.bing.com" target="_blank" rel="noopener">必应搜索</a><br><a href="https://www.bilibili.com" target="_blank" rel="noopener">哔哩哔哩</a></p><h2 id="博客搭建过程参考"><a href="#博客搭建过程参考" class="headerlink" title="博客搭建过程参考"></a>博客搭建过程参考</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26625249</a></p></blockquote><h2 id="域名解析步骤"><a href="#域名解析步骤" class="headerlink" title="域名解析步骤"></a>域名解析步骤</h2><ol><li>在<u>阿里云-&gt;域名列表</u>，添加解析记录</li><li>登录GitHub，进入之前创建的仓库，点击<em>settings</em>，设置<em>Custom domain</em>，输入你的域名</li><li>进入blog/source目录，创建CNAME文件（无后缀名），写入<a href="http://www.xxx.com或xxx.com" target="_blank" rel="noopener">www.xxx.com或xxx.com</a></li></ol><p><img src="C:%5CUsers%5Cpluto%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200712161610810.png" alt="第一步"></p><p><img src="C:%5CUsers%5Cpluto%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200712161659951.png" alt="第二步"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
